$date
	Fri Mar  1 17:45:02 2019
$end

$version
	Synopsys VCS version K-2015.09_Full64
$end

$timescale
	1s
$end

$comment Csum: 1 a573cb53cd8c1e63 $end


$scope module hamFix_test $end
$var reg 1 ! clock $end
$var reg 1 " hasErrors $end
$var reg 15 # ham [15:1] $end
$var reg 15 $ fixed [15:1] $end
$var reg 15 % enc [15:1] $end
$var reg 12 & i [12:1] $end

$scope function hamEncode $end
$var reg 15 ' hamEncode [15:1] $end
$var reg 11 ( data [11:1] $end
$var reg 1 ) p1 $end
$var reg 1 * p2 $end
$var reg 1 + p4 $end
$var reg 1 , p8 $end
$var reg 15 - encoded [15:1] $end
$upscope $end


$scope function hamDecode $end
$var reg 15 . hamDecode [15:1] $end
$var reg 15 / ham [15:1] $end
$var reg 15 0 fixed [15:1] $end
$var reg 1 1 p1 $end
$var reg 1 2 p2 $end
$var reg 1 3 p3 $end
$var reg 1 4 p4 $end
$var reg 4 5 parity [3:0] $end
$upscope $end


$scope module DUT $end
$var wire 1 6 clock $end
$var wire 15 7 ham [15:1] $end
$var wire 15 8 fixed [15:1] $end
$var reg 15 9 fixedAsync [15:1] $end
$var reg 15 : fixed_r [15:1] $end
$var wire 1 ; p1 $end
$var wire 1 < p2 $end
$var wire 1 = p3 $end
$var wire 1 > p4 $end
$var wire 4 ? parity [3:0] $end
$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
x;
x<
x=
x>
0!
x1
x2
x3
x4
x)
x*
x+
x,
0"
bxxxxxxxxxxxxxxx 8
bxxxxxxxxxxxxxxx 7
bxxxx ?
bxxxxxxxxxxxxxxx %
bxxxxxxxxxxxxxxx $
bxxxxxxxxxxxxxxx 9
bxxxxxxxxxxxxxxx :
bxxxxxxxxxxxxxxx #
bxxxxxxxxxxxxxxx 0
bxxxxxxxxxxxxxxx /
bxxxxxxxxxxxxxxx .
bxxxx 5
bxxxxxxxxxxx (
bxxxxxxxxxxxxxxx -
bxxxxxxxxxxxxxxx '
bxxxxxxxxxxxx &
06
$end
#5
1!
16
b000000000000 &
#10
0!
06
#15
1!
16
#20
0!
06
